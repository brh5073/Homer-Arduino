
#include <Adafruit_GFX.h>    // Core graphics library
#include "Adafruit_GC9A01A.h" // Hardware-specific library
//#include <Wire.h>
#include <SPI.h>

long readUltrasonicDistance(int  trigPin, int echoPin);

// Relay parameters
const int numRelays = 6;
const int relayPins[numRelays] = { 4, 5, 6, 7 };


#define trigPin 2
#define echoPin 12 
#define led 11

//TFT is just for testing
#define TFT_CS    10      // TFT CS pin is connected to Arduino pin 10
#define TFT_RST   8       // TFT RST pin is connected to Arduino pin 9
#define TFT_DC    9       // TFT DC pin is connected to Arduino pin 8

#define TFT_CS2   6
#define TFT_RST2  5

Adafruit_GC9A01A tft = Adafruit_GC9A01A(TFT_CS, TFT_DC, TFT_RST);
Adafruit_GC9A01A tft2 = Adafruit_GC9A01A(TFT_CS2, TFT_DC, TFT_RST2);

void setup() {
  Serial.begin(9600);



pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);
//pinMode(led, OUTPUT);

// Set all relay pins as OUTPUT
 for (int i = 0; i < numRelays; i++) {
   pinMode(relayPins[i], OUTPUT);
   digitalWrite(relayPins[i], HIGH);  // Ensure all relays are initially off
 }

  openRelay(0);
  openRelay(1);
  openRelay(2);
  openRelay(3);
  openRelay(4);
  openRelay(5);


  tft.begin();
  tft.setRotation(2);
  tft.fillScreen(GC9A01A_BLACK);

  tft2.begin();
  tft2.setRotation(2);
  tft2.fillScreen(GC9A01A_BLACK);
 

}

void loop() {
long duration, distance,distance_in;

digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
duration = pulseIn(echoPin, HIGH);
distance = (duration/2) / 29.1;
distance_in = distance * 0.393701; 

if (distance_in > 60)
{ //digitalWrite(led,HIGH);
Serial.println("Green");
openRelay(0);
closeRelay(1);
closeRelay(2);
closeRelay(3);
closeRelay(4);
closeRelay(5);

tft.fillScreen(GC9A01A_BLACK);
  tft.setCursor(70, 70);
  tft.setTextColor(GC9A01A_GREEN);
  tft.setTextSize(8);
  tft.print(distance_in);
}
else if (distance_in > 24 && distance_in < 60)
{

closeRelay(0);
openRelay(1);
closeRelay(2);
closeRelay(3);
closeRelay(4);
closeRelay(5);

Serial.println("Yellow");
tft.fillScreen(GC9A01A_BLACK);
  tft.setCursor(70, 70);
  tft.setTextColor(GC9A01A_YELLOW);
  tft.setTextSize(8);
  tft.print(distance_in);
}
else if (distance_in < 24)
{
closeRelay(0);
closeRelay(1);
openRelay(2);
closeRelay(3);
closeRelay(4);
closeRelay(5);

Serial.println("Red");
tft.fillScreen(GC9A01A_BLACK);
  tft.setCursor(70, 70);
  tft.setTextColor(GC9A01A_RED);
  tft.setTextSize(8);
  tft.print(distance_in);
}
Serial.print(distance_in);
Serial.println(" in");
Serial.println(duration);
//delay(500);



/*{
  tft2.fillScreen(GC9A01A_BLACK);
  int x0 = 40;
int y0 = 160;  // Decrease y0 to move the triangle up
int x1 = 120;
int y1 = 40; // Decrease y1 to move the triangle up
int x2 = 200;
int y2 = 160;  // Decrease y2 to move the triangle up

// Draw the filled triangle
tft2.fillTriangle(x0, y0, x1, y1, x2, y2, GC9A01A_WHITE);
}
delay(5000);
{
  //Bottom of inning
  // Define the coordinates for the vertices of the triangle
  tft2.fillScreen(GC9A01A_BLACK);
  int x0 = 40;
  int y0 = 80;  // Increase y0 to move the triangle down
  int x1 = 120;
  int y1 = 200; // Increase y1 to move the triangle down
  int x2 = 200;
  int y2 = 80;  // Increase y2 to move the triangle down

  // Draw the filled triangle
  tft2.fillTriangle(x0, y0, x1, y1, x2, y2, GC9A01A_WHITE);
}
*/
  delay(100);
}

// Function to close a relay
void closeRelay(int relayIndex) {
 {
   digitalWrite(relayPins[relayIndex], LOW);
 }
 Serial.print("Relay ");
 Serial.print(relayIndex + 1);
 Serial.println(" low");
}

// Function to open a relay
void openRelay(int relayIndex) {
 {
   digitalWrite(relayPins[relayIndex], HIGH);
 }
 Serial.print("Relay ");
 Serial.print(relayIndex + 1);
 Serial.println(" High");
}
